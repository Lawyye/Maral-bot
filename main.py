import logging
import os
import re
import json
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from aiohttp import web

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables")
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID is not set in environment variables")

# üåê –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://maral-bot.onrender.com")
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
Bot.set_current(bot)  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò –ö–û–ù–¢–ï–ö–°–¢–ê
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM —Ñ–æ—Ä–º–∞
class RequestForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä"),
    KeyboardButton("üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
)

# START
@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logging.info(f"üü¢ START –ö–û–ú–ê–ù–î–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {message.from_user.id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    await message.answer(
        "üéì *”ò–î–Ü–°–¢–ï–ú–ï–õ–Ü–ö –ö”®–ú–ï–ö –ë–û–¢–´*\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîä –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ, “õ“±—Ä–º–µ—Ç—Ç—ñ “±—Å—Ç–∞–∑!\n\n"
        "–ë“±–ª –±–æ—Ç –±–∞—Å—Ç–∞—É—ã—à —Å—ã–Ω—ã–ø –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ–Ω–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.\n"
        "–ú“±–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç *–±–∞—Å—Ç–∞—É—ã—à –±—ñ–ª—ñ–º –±–µ—Ä—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã* –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –¥–∞–π—ã–Ω–¥–∞–ª“ì–∞–Ω.\n\n"
        "üìö *–°—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–∑:*\n"
        "‚úÖ –°–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã (—Å–∞–±–∞“õ—Ç—ã“£ –∫–µ–∑–µ“£–¥–µ—Ä—ñ, –∞—Å–ø–µ–∫—Ç—ñ–ª–µ—Ä—ñ, “õ“±–Ω–¥—ã–ª—ã“õ—Ç–∞—Ä, –∫–µ“£–µ–π—Ç—ñ–ª–≥–µ–Ω –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã –µ–Ω–≥—ñ–∑—É)\n"
        "‚úÖ –ë–∞“ì–∞–ª–∞—É –∂“Ø–π–µ—Å—ñ (“õ–∞–ª—ã–ø—Ç–∞—Å—Ç—ã—Ä—É—à—ã –±–∞“ì–∞–ª–∞—É, –±–∞“õ—ã–ª–∞—É, –±–∞“ì–∞–ª–∞—É —Ç“Ø—Ä–ª–µ—Ä—ñ)\n"
        "‚úÖ –ü”ô–Ω–¥—ñ–∫ —Å“±—Ä–∞“õ—Ç–∞—Ä (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ, ”ô–¥–µ–±–∏–µ—Ç, –∂–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É, –¥“Ø–Ω–∏–µ—Ç–∞–Ω—É)\n"
        "‚úÖ “ö“±–∂–∞—Ç—Ç–∞—Ä –º–µ–Ω –∞–Ω—ã“õ—Ç–∞–º–∞–ª–∞—Ä\n"
        "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä\n"
        "‚úÖ –°–µ–º–∏–Ω–∞—Ä–ª–∞—Ä –º–µ–Ω –∫—É—Ä—Å –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä\n"
        "‚úÖ –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞ –±–æ–π—ã–Ω—à–∞ –∫–µ“£–µ—Å (“õ–∞–Ω–¥–∞–π –∏–¥–µ—è–ª–∞—Ä —Ç–∏—ñ–º–¥—ñ)\n"
        "‚úÖ –ê—Ç—Ç–µ—Å—Ç–∞—Ç—Ç–∞—É –∂”ô–Ω–µ –∞–Ω—ã“õ—Ç–∞–º–∞ –∞–ª—É –∂–æ–ª–¥–∞—Ä—ã\n\n"
        "üì≤ *“ö–∞–ª–∞–π –±–∞–π–ª–∞–Ω—ã—Å—É“ì–∞ –±–æ–ª–∞–¥—ã?*\n"
        "–¢”©–º–µ–Ω–¥–µ–≥—ñ –º”ô–∑—ñ—Ä–¥–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –±”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ –æ“£ –∂–∞“õ—Ç–∞“ì—ã –º”ô–∑—ñ—Ä–¥—ñ –±–∞—Å—ã–ø, WhatsApp-“õ–∞ —à—ã“ì—ã“£—ã–∑.\n"
        "–ñ–∞—É–∞–ø 24 —Å–∞“ì–∞—Ç—Ç—ã“£ —ñ—à—ñ–Ω–¥–µ –±–µ—Ä—ñ–ª–µ–¥—ñ.",
        parse_mode="Markdown",
        reply_markup=main_kb
    )

# FSM –¥–∏–∞–ª–æ–≥
@dp.message_handler(lambda msg: msg.text == "üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É", state='*')
async def start_request(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ FSM."""
    logging.info(f"üü° –ó–ê–Ø–í–ö–ê –ù–ê–ß–ê–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú {message.from_user.id}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    await message.answer("üìõ –ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ", callback_data="back_to_main"))
    await message.answer("_–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)
    await RequestForm.waiting_for_name.set()

@dp.message_handler(state=RequestForm.waiting_for_name)
async def get_name(message: types.Message, state: FSMContext):
    logging.info(f"üü° –ò–ú–Ø –ü–û–õ–£–ß–ï–ù–û: {message.text}")
    
    await state.update_data(name=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì≤ –ù”©–º—ñ—Ä—ñ–º–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True))
    kb.add(KeyboardButton("‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"))
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:", reply_markup=kb)
    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º", callback_data="back_to_name_prev"))
    await message.answer("_–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)
    await RequestForm.waiting_for_phone.set()

# –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"
@dp.message_handler(lambda msg: msg.text == "‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω", state=RequestForm.waiting_for_phone)
async def manual_phone_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    logging.info(f"üü° –†–£–ß–ù–û–ô –í–í–û–î –¢–ï–õ–ï–§–û–ù–ê –í–´–ë–†–ê–ù: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    
    await message.answer(
        "üìù –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:\n"
        "_–ú—ã—Å–∞–ª—ã: +7 (777) 123-45-67_",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º", callback_data="back_to_name_prev"))
    await message.answer("_–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

@dp.message_handler(content_types=types.ContentType.CONTACT, state=RequestForm.waiting_for_phone)
async def get_phone_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç."""
    logging.info(f"üü° –ö–û–ù–¢–ê–ö–¢ –ü–û–õ–£–ß–ï–ù: {message.contact.phone_number}")
    await state.update_data(phone=message.contact.phone_number)

    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:", reply_markup=types.ReplyKeyboardRemove())

    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º", callback_data="back_to_phone_prev"))
    await message.answer("_–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

    await RequestForm.waiting_for_question.set()

@dp.message_handler(state=RequestForm.waiting_for_phone)
async def get_phone_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ "‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"
    if message.text == "‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω":
        return  # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –≤—ã—à–µ
    
    logging.info(f"üü° –¢–ï–õ–ï–§–û–ù –¢–ï–ö–°–¢–û–ú: {message.text}")
    await state.update_data(phone=message.text)

    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:", reply_markup=types.ReplyKeyboardRemove())

    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º", callback_data="back_to_phone_prev"))
    await message.answer("_–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

    await RequestForm.waiting_for_question.set()

@dp.message_handler(state=RequestForm.waiting_for_question)
async def get_question(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç FSM."""
    logging.info(f"üü° –í–û–ü–†–û–° –ü–û–õ–£–ß–ï–ù –û–¢ {message.from_user.id}: {message.text}")
    
    try:
        user_data = await state.get_data()
        name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        question = message.text

        logging.info(f"üü° –î–ê–ù–ù–´–ï: –∏–º—è={name}, —Ç–µ–ª–µ—Ñ–æ–Ω={phone}")

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤—ã–Ω–æ—Å–∏–º re.sub –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        wa_phone = re.sub(r'[^\d]', '', phone)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_text = (
            f"üì• *–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ–º!*\n\n"
            f"üë§ *–ê—Ç—ã:* {name}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"‚ùì *–°“±—Ä–∞“õ:* {question}\n\n"
            f"üì± [WhatsApp-“õ–∞ ”©—Ç—É](https://wa.me/{wa_phone})"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID, 
                text=admin_text, 
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            logging.info(f"‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –ê–î–ú–ò–ù–£ {ADMIN_CHAT_ID}")
        except Exception as e:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ê–î–ú–ò–ù–£: {e}")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ *–†–∞“õ–º–µ—Ç!*\n\n"
            "–°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã –∂”ô–Ω–µ –º–∞–º–∞–Ω“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.\n"
            "–ñ–∞—É–∞–ø 24 —Å–∞“ì–∞—Ç —ñ—à—ñ–Ω–¥–µ –±–µ—Ä—ñ–ª–µ–¥—ñ.\n\n"
            "_–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑_",
            parse_mode="Markdown",
            reply_markup=main_kb
        )

        logging.info(f"‚úÖ –ó–ê–Ø–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –î–õ–Ø {message.from_user.id}")

    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –í get_question: {e}")
        await message.answer(
            "‚ùå “ö–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ /start –±–∞—Å—ã“£—ã–∑.",
            reply_markup=main_kb
        )
    finally:
        # –í–°–ï–ì–î–ê –∑–∞–≤–µ—Ä—à–∞–µ–º FSM
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ –¥–ª—è FSM
@dp.callback_query_handler(lambda c: c.data == "back_to_main", state='*')
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    await state.finish()

    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await callback_query.answer("–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑ ‚úÖ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await callback_query.message.answer(
        "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:",
        reply_markup=main_kb
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_name_prev", state=RequestForm.waiting_for_phone)
async def back_to_name_step(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–∑ —à–∞–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await callback_query.answer("–ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º“ì–∞ –æ—Ä–∞–ª–¥—ã“£—ã–∑")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await RequestForm.waiting_for_name.set()

    await callback_query.message.answer("üìõ –ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:")

    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ", callback_data="back_to_main"))
    await callback_query.message.answer("_–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

@dp.callback_query_handler(lambda c: c.data == "back_to_phone_prev", state=RequestForm.waiting_for_question)
async def back_to_phone_step(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —à–∞–≥–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await callback_query.answer("–ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º“ì–∞ –æ—Ä–∞–ª–¥—ã“£—ã–∑")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await RequestForm.waiting_for_phone.set()

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì≤ –ù”©–º—ñ—Ä—ñ–º–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True))
    kb.add(KeyboardButton("‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"))

    await callback_query.message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:", reply_markup=kb)

    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ê–ª–¥—ã“£“ì—ã “õ–∞–¥–∞–º", callback_data="back_to_name_prev"))
    await callback_query.message.answer("_–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

# FAQ (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
@dp.message_handler(lambda msg: msg.text == "üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä", state='*')
async def show_faq_categories(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ FAQ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    logging.info(f"üîµ FAQ –ó–ê–ü–†–û–®–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú {message.from_user.id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìö –ü”ô–Ω –±–æ–π—ã–Ω—à–∞", callback_data="faq_subjects"),
        InlineKeyboardButton("üìù –ë–∞“ì–∞–ª–∞—É / –°–∞–±–∞“õ", callback_data="faq_assessment"),
        InlineKeyboardButton("üìé –ë–∞—Å“õ–∞—Ä—É / –ú–∞“õ–∞–ª–∞", callback_data="faq_docs"),
        InlineKeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è / –ö—É—Ä—Å", callback_data="faq_psy"),
        InlineKeyboardButton("üßæ –ê–Ω—ã“õ—Ç–∞–º–∞ / –ê—à—ã“õ —Å–∞–±–∞“õ", callback_data="faq_cert"),
        InlineKeyboardButton("üéØ –°–∞–π—ã—Å / –ê–≤—Ç–æ—Ä–ª—ã“õ", callback_data="faq_other")
    )

    await message.answer("ü§î “ö–∞–π –±”©–ª—ñ–º –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“ì—ã“£—ã–∑ –±–∞—Ä?", reply_markup=kb)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ", callback_data="faq_back_to_main"))
    await message.answer("_–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("faq_"), state='*')
async def show_faq_detail(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ FAQ."""
    logging.info(f"üîµ FAQ CALLBACK: {callback_query.data}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await state.finish()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    if callback_query.data == "faq_back_to_main":
        await callback_query.answer("–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑ ‚úÖ")
        await callback_query.message.answer("–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:", reply_markup=main_kb)
        return

    elif callback_query.data == "faq_back_to_categories":
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä“ì–∞ –æ—Ä–∞–ª–¥—ã“£—ã–∑")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–æ–≤–∞
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("üìö –ü”ô–Ω –±–æ–π—ã–Ω—à–∞", callback_data="faq_subjects"),
            InlineKeyboardButton("üìù –ë–∞“ì–∞–ª–∞—É / –°–∞–±–∞“õ", callback_data="faq_assessment"),
            InlineKeyboardButton("üìé –ë–∞—Å“õ–∞—Ä—É / –ú–∞“õ–∞–ª–∞", callback_data="faq_docs"),
            InlineKeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è / –ö—É—Ä—Å", callback_data="faq_psy"),
            InlineKeyboardButton("üßæ –ê–Ω—ã“õ—Ç–∞–º–∞ / –ê—à—ã“õ —Å–∞–±–∞“õ", callback_data="faq_cert"),
            InlineKeyboardButton("üéØ –°–∞–π—ã—Å / –ê–≤—Ç–æ—Ä–ª—ã“õ", callback_data="faq_other")
        )
        await callback_query.message.answer("ü§î “ö–∞–π –±”©–ª—ñ–º –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“ì—ã“£—ã–∑ –±–∞—Ä?", reply_markup=kb)

        back_kb = InlineKeyboardMarkup()
        back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ", callback_data="faq_back_to_main"))
        await callback_query.message.answer("_–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)
        return

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    faq_data = {
        "faq_subjects": (
            "üìö *–ü”ô–Ω –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä:*\n\n"
            "‚Ä¢ *–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞* - –µ—Å–µ–ø—Ç–µ—É –¥–∞“ì–¥—ã–ª–∞—Ä—ã, –ª–æ–≥–∏–∫–∞–ª—ã“õ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä\n"
            "‚Ä¢ *“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ* - –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, —Å”©–π–ª–µ—É –¥–∞“ì–¥—ã–ª–∞—Ä—ã\n"
            "‚Ä¢ *”ò–¥–µ–±–∏–µ—Ç—Ç—ñ–∫ –æ“õ—É* - –º”ô–Ω–µ—Ä–ª–µ–ø –æ“õ—É, –º”ô—Ç—ñ–Ω–º–µ–Ω –∂“±–º—ã—Å\n"
            "‚Ä¢ *–ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É* - –∑–µ—Ä—Ç—Ç–µ—É –∂“±–º—ã—Å—Ç–∞—Ä—ã, —Ç”ô–∂—ñ—Ä–∏–±–µ–ª–µ—Ä\n"
            "‚Ä¢ *–î“Ø–Ω–∏–µ—Ç–∞–Ω—É* - –∂–æ–±–∞–ª—ã“õ –∂“±–º—ã—Å—Ç–∞—Ä, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–ª–∞—Ä\n"
            "‚Ä¢ *”ò–ª—ñ–ø–ø–µ* - –¥—ã–±—ã—Å—Ç—ã“õ —Ç–∞–ª–¥–∞—É, –∂–∞–∑—É –¥–∞“ì–¥—ã–ª–∞—Ä—ã"
        ),
        "faq_assessment": (
            "üìù *–ë–∞“ì–∞–ª–∞—É –º–µ–Ω —Å–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã:*\n\n"
            "‚Ä¢ *–°–∞–±–∞“õ “õ“±—Ä—ã–ª—ã–º—ã* - –∫–µ–∑–µ“£–¥–µ—Ä—ñ, —É–∞“õ—ã—Ç—Ç—ã –±”©–ª—É\n"
            "‚Ä¢ *“ö–∞–ª—ã–ø—Ç–∞—Å—Ç—ã—Ä—É—à—ã –±–∞“ì–∞–ª–∞—É* - ”ô–¥—ñ—Å—Ç–µ—Ä—ñ, “õ“±—Ä–∞–ª–¥–∞—Ä—ã\n"
            "‚Ä¢ *–ñ–∏—ã–Ω—Ç—ã“õ –±–∞“ì–∞–ª–∞—É* - –ë–ñ–ë, –¢–ñ–ë ”©—Ç–∫—ñ–∑—É\n"
            "‚Ä¢ *–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å* - —Ç–∏—ñ–º–¥—ñ ”ô–¥—ñ—Å—Ç–µ—Ä—ñ\n"
            "‚Ä¢ *–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–ª–∞—Ä* - “õ“±—Ä–∞—Å—Ç—ã—Ä—É –∂–æ–ª–¥–∞—Ä—ã\n"
            "‚Ä¢ *–ö–µ“£–µ–π—Ç—ñ–ª–≥–µ–Ω –¥–∞“ì–¥—ã–ª–∞—Ä* - –µ–Ω–≥—ñ–∑—É —Ç”ô—Å—ñ–ª–¥–µ—Ä—ñ"
        ),
        "faq_docs": (
            "üìé *“ö“±–∂–∞—Ç—Ç–∞—Ä / –ú–∞“õ–∞–ª–∞ / –ë–∞—Å“õ–∞—Ä—É:*\n\n"
            "‚Ä¢ *–°—ã–Ω—ã–ø—Ç—ã –±–∞—Å“õ–∞—Ä—É* - —Ç”ô—Ä—Ç—ñ–ø, –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
            "‚Ä¢ *“ö“±–∂–∞—Ç –∂“Ø—Ä–≥—ñ–∑—É* - –∂—É—Ä–Ω–∞–ª, –∂–æ—Å–ø–∞—Ä–ª–∞—Ä\n"
            "‚Ä¢ *–ú–∞“õ–∞–ª–∞ –∂–∞—Ä–∏—è–ª–∞—É* - —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–ª—ã“õ –±–∞—Å—ã–ª—ã–º–¥–∞—Ä\n"
            "‚Ä¢ *–ê—Ç–∞-–∞–Ω–∞–ª–∞—Ä–º–µ–Ω –∂“±–º—ã—Å* - –∫–µ“£–µ—Å—Ç–µ—Ä, –∂–∏–Ω–∞–ª—ã—Å—Ç–∞—Ä\n"
            "‚Ä¢ *–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ* - –¥–∞–π—ã–Ω–¥–∞—É, —Ä”ô—Å—ñ–º–¥–µ—É"
        ),
        "faq_psy": (
            "üí¨ *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä –º–µ–Ω –∫—É—Ä—Å:*\n\n"
            "‚Ä¢ *–ë–∞–ª–∞–ª–∞—Ä–º–µ–Ω —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä* - ”©–∑—ñ–Ω-”©–∑—ñ —Ç–∞–Ω—É, –¥–æ—Å—Ç—ã“õ\n"
            "‚Ä¢ *–ê—Ç–∞-–∞–Ω–∞–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω* - —Ç”ô—Ä–±–∏–µ, “õ–∞—Ä—ã–º-“õ–∞—Ç—ã–Ω–∞—Å\n"
            "‚Ä¢ *–ú“±“ì–∞–ª—ñ–º–¥–µ—Ä–≥–µ* - –∫”ô—Å—ñ–±–∏ “õ–∏—ã–Ω–¥—ã“õ—Ç–∞—Ä–¥—ã–Ω –∞–ª–¥—ã–Ω –∞–ª—É\n"
            "‚Ä¢ *–ö—É—Ä—Å—Ç–∞—Ä* - –±—ñ–ª—ñ–∫—Ç—ñ–ª—ñ–∫—Ç—ñ –∞—Ä—Ç—Ç—ã—Ä—É\n"
            "‚Ä¢ *–°–µ–º–∏–Ω–∞—Ä–ª–∞—Ä* - –∑–∞–º–∞–Ω–∞—É–∏ ”ô–¥—ñ—Å—Ç–µ—Ä"
        ),
        "faq_cert": (
            "üßæ *–ê–Ω—ã“õ—Ç–∞–º–∞ / –ê—à—ã“õ —Å–∞–±–∞“õ:*\n\n"
            "‚Ä¢ *–ê—à—ã“õ —Å–∞–±–∞“õ* - –¥–∞–π—ã–Ω–¥—ã“õ, ”©—Ç–∫—ñ–∑—É –∫–µ–∑–µ“£–¥–µ—Ä—ñ\n"
            "‚Ä¢ *–°–∞–±–∞“õ —Ç–∞–ª–¥–∞—É* - ”©–∑—ñ–Ω-”©–∑—ñ —Ç–∞–ª–¥–∞—É —Å—Ö–µ–º–∞—Å—ã\n"
            "‚Ä¢ *–ê–Ω—ã“õ—Ç–∞–º–∞ –∞–ª—É* - “õ–∞–∂–µ—Ç—Ç—ñ “õ“±–∂–∞—Ç—Ç–∞—Ä\n"
            "‚Ä¢ *–ú—ñ–Ω–µ–∑–¥–µ–º–µ* - –∂–∞–∑—É “Ø–ª–≥—ñ–ª–µ—Ä—ñ\n"
            "‚Ä¢ *–ì—Ä–∞–º–æ—Ç–∞, –∞–ª“ì—ã—Å —Ö–∞—Ç* - —Ä”ô—Å—ñ–º–¥–µ—É"
        ),
        "faq_other": (
            "üéØ *–°–∞–π—ã—Å / –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞:*\n\n"
            "‚Ä¢ *–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –∏–¥–µ—è–ª–∞—Ä* - '“Æ–∑–¥—ñ–∫ –ø–µ–¥–∞–≥–æ–≥', '–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –∏–¥–µ—è–ª–∞—Ä –ø–∞–Ω–æ—Ä–∞–º–∞—Å—ã' —Å–∞–π—ã—Å—ã\n"
            "‚Ä¢ *–ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞* - “õ“±—Ä–∞—Å—Ç—ã—Ä—É, “õ–æ—Ä“ì–∞—É\n"
            "‚Ä¢ *–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è* - –¥–∞–π—ã–Ω–¥—ã“õ, “õ“±–∂–∞—Ç—Ç–∞—Ä\n"
            "‚Ä¢ *“í—ã–ª—ã–º–∏ –∂–æ–±–∞–ª–∞—Ä* - –æ“õ—É—à—ã–ª–∞—Ä–º–µ–Ω –∂“±–º—ã—Å\n"
            "‚Ä¢ *–ò–Ω–Ω–æ–≤–∞—Ü–∏—è–ª—ã“õ ”ô–¥—ñ—Å—Ç–µ—Ä* - –µ–Ω–≥—ñ–∑—É —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ"
        )
    }

    text = faq_data.get(callback_query.data, "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    await callback_query.answer("–ê“õ–ø–∞—Ä–∞—Ç –∂“Ø–∫—Ç–µ–ª–¥—ñ ‚úÖ")
    await callback_query.message.answer(text, parse_mode="Markdown")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    back_kb = InlineKeyboardMarkup()
    back_kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è–ª–∞—Ä“ì–∞", callback_data="faq_back_to_categories"))
    await callback_query.message.answer("_–ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω:_", parse_mode="Markdown", reply_markup=back_kb)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['ping'])
async def ping_handler(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    await message.answer("üü¢ –ë–æ—Ç –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä!")

@dp.message_handler(commands=['menu'], state='*')
async def show_main_menu(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /menu: —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.finish()
    await message.answer("–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:", reply_markup=main_kb)

@dp.message_handler(commands=['reset'], state='*')
async def reset_bot(message: types.Message, state: FSMContext):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞."""
    await state.finish()
    await message.answer(
        "‚ôªÔ∏è –ë–æ—Ç —Ç–æ–ª—ã“õ “õ–∞–π—Ç–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã.\n"
        "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–∞–º—ã–∑...",
        reply_markup=main_kb
    )

# –í–ê–ñ–ù–û: Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state='*')
async def fallback_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã."""
    logging.info(f"üî¥ FALLBACK: {message.text} –æ—Ç {message.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    if current_state:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º
        await message.answer(
            "‚ùì –°—ñ–∑ “õ–∞–∑—ñ—Ä –∑–∞—è–≤–∫–∞–Ω—ã —Ç–æ–ª—Ç—ã—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω–¥–µ —Ç“±—Ä—Å—ã–∑.\n"
            "–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª—É “Ø—à—ñ–Ω /start –±–∞—Å—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ –ø—Ä–æ—Ü–µ—Å—Ç—ñ –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—ã“£—ã–∑.",
            reply_markup=main_kb
        )
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "‚ùì –¢“Ø—Å—ñ–Ω—ñ–∫—Å—ñ–∑ –∫–æ–º–∞–Ω–¥–∞.\n"
            "–ú”ô–∑—ñ—Ä–¥–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –æ–ø—Ü–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=main_kb
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: True, state='*')
async def handle_unknown_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∫–Ω–æ–ø–æ–∫."""
    logging.info(f"üî¥ UNKNOWN CALLBACK: {callback_query.data}")
    await callback_query.answer("–ë–µ–ª–≥—ñ—Å—ñ–∑ –∫–æ–º–∞–Ω–¥–∞. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.", show_alert=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def global_error_handler(update, exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.error(f"‚ùå –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –≤ update {update}: {exception}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if update.message:
            await update.message.answer(
                "‚ùå –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ–∞—Ç–µ. /start –±–∞—Å—ã–ø “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.",
                reply_markup=main_kb
            )
    except Exception:
        pass
    
    return True

# ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô WEBHOOK –û–ë–†–ê–ë–û–¢–ß–ò–ö ==========
async def webhook_handler(request):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.text()
        logging.info(f"üîµ WEBHOOK –ü–û–õ–£–ß–ï–ù: {len(body)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if not body:
            logging.warning("‚ö†Ô∏è –ü–£–°–¢–û–ï –¢–ï–õ–û –ó–ê–ü–†–û–°–ê")
            return web.Response(text="Empty body", status=400)
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            json_data = json.loads(body)
            logging.info(f"‚úÖ JSON –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ï–ù")
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON: {e}")
            return web.Response(text="Invalid JSON", status=400)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        try:
            update = types.Update(**json_data)
            logging.info(f"‚úÖ UPDATE –°–û–ó–î–ê–ù: update_id={update.update_id}")
            
            if update.message:
                user = update.message.from_user
                logging.info(f"üì© –°–û–û–ë–©–ï–ù–ò–ï –û–¢: @{user.username} (ID: {user.id})")
                logging.info(f"üìù –¢–ï–ö–°–¢: {update.message.text}")
            elif update.callback_query:
                logging.info(f"üîò CALLBACK: {update.callback_query.data}")
                
        except Exception as e:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø UPDATE: {e}")
            return web.Response(text="Invalid update", status=400)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        try:
            await dp.process_update(update)
            logging.info(f"‚úÖ UPDATE –û–ë–†–ê–ë–û–¢–ê–ù –£–°–ü–ï–®–ù–û")
            return web.Response(text="OK")
            
        except Exception as e:
            logging.error(f"‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò UPDATE: {e}")
            return web.Response(text="Processing error", status=500)
            
    except Exception as e:
        logging.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í WEBHOOK: {e}")
        return web.Response(text="Internal server error", status=500)

# ========== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==========
async def on_startup(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"üöÄ WEBHOOK –£–°–¢–ê–ù–û–í–õ–ï–ù: {WEBHOOK_URL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        logging.info(f"üìã WEBHOOK INFO: {webhook_info}")
        
    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò WEBHOOK: {e}")

async def on_shutdown(app):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
    try:
        await bot.delete_webhook()
        logging.info("üî¥ WEBHOOK –£–î–ê–õ–ï–ù")
        await dp.storage.close()
        await dp.storage.wait_closed()
        logging.info("üî¥ STORAGE –ó–ê–ö–†–´–¢")
    except Exception as e:
        logging.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò: {e}")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º startup/shutdown handlers
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    logging.info(f"üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ù–ê {WEBAPP_HOST}:{WEBAPP_PORT}")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)