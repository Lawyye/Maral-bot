import logging
import os
import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = 584791919

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RequestForm(StatesGroup):
    name = State()
    phone = State()
    question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä"),
    KeyboardButton("üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –ë“±–ª –±–æ—Ç –±–∞—Å—Ç–∞—É—ã—à —Å—ã–Ω—ã–ø –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ–Ω–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω ”ô–¥—ñ—Å—Ç–µ–º–µ–ª—ñ–∫ –∫”©–º–µ–∫ –∫”©—Ä—Å–µ—Ç—É “Ø—à—ñ–Ω –∂–∞—Å–∞–ª“ì–∞–Ω.\n–¢”©–º–µ–Ω–Ω–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –±”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=main_kb
    )

@dp.message_handler(lambda message: message.text == "üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä")
async def faq_handler(message: types.Message):
    await message.answer(
        "ü§î *–ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä:*\n\n"
        "1. –°–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä\n"
        "2. –ë–∞“ì–∞–ª–∞—É –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä\n"
        "3. –ü”ô–Ω –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ, –ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É, –î“Ø–Ω–∏–µ—Ç–∞–Ω—É, ”ò–ª—ñ–ø–ø–µ\n"
        "4. –ú–∞“õ–∞–ª–∞ –∂–∞—Ä–∏—è–ª–∞—É\n5. –°—ã–Ω—ã–ø—Ç—ã –±–∞—Å“õ–∞—Ä—É\n6. –ê–ö–¢\n7. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä\n8. –ö—É—Ä—Å –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä\n9. –°–µ–º–∏–Ω–∞—Ä–ª–∞—Ä\n10. –ê–Ω—ã“õ—Ç–∞–º–∞\n11. –ö—É—Ä—Å—Ç–∞–Ω –∫–µ–π—ñ–Ω–≥—ñ “õ–æ–ª–¥–∞—É\n12. –ê—à—ã“õ —Å–∞–±–∞“õ\n13. –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –∏–¥–µ—è–ª–∞—Ä —Å–∞–π—ã—Å—ã\n14. –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞\n15. –ë–∞—Å“õ–∞ –¥–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä\n\n"
        "üë©‚Äçüè´ –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–ª—ñ“£—ñ–∑ “õ–∞–Ω—à–∞ –∂—ã–ª?",
        parse_mode="Markdown"
    )

@dp.message_handler(lambda message: message.text == "üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
async def start_request(message: types.Message):
    await message.answer("üë§ –ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.name.set()

@dp.message_handler(state=RequestForm.name)
async def request_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    contact_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_kb.add(KeyboardButton("üì≤ –ù”©–º—ñ—Ä—ñ–º–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True))
    contact_kb.add(KeyboardButton("‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"))
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∂–∞–∑—ã“£—ã–∑:", reply_markup=contact_kb)
    await RequestForm.phone.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=RequestForm.phone)
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.question.set()

@dp.message_handler(lambda message: message.text.startswith("‚úçÔ∏è"), state=RequestForm.phone)
async def ask_manual_phone(message: types.Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:")

@dp.message_handler(state=RequestForm.phone)
async def get_manual_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:")
    await RequestForm.question.set()

@dp.message_handler(state=RequestForm.question)
async def get_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = data['phone']
    question = message.text

    text = (
        f"üìÖ *–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ–º!*\n"
        f"\nüë§ –ê—Ç—ã: {name}"
        f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        f"\nüí¨ –°“±—Ä–∞“õ: {question}"
        f"\n\nüì≤ WhatsApp: https://wa.me/{''.join(filter(str.isdigit, phone))}"
    )
    await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")
    await message.answer("–†–∞“õ–º–µ—Ç! ”®—Ç—ñ–Ω—ñ–º—ñ“£—ñ–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.", reply_markup=main_kb)
    await state.finish()

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä anti-sleep
async def web_handler(request):
    return web.Response(text="Bot is running!")

async def web_server():
    app = web.Application()
    app.router.add_get('/', web_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.environ.get('PORT', 8080)))
    await site.start()

async def main():
    await asyncio.gather(
        web_server(),
        dp.start_polling()
    )

if __name__ == '__main__':
    asyncio.run(main())
