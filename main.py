
import logging
import os
import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from aiohttp import web

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = 584791919

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM —Ñ–æ—Ä–º–∞
class RequestForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä"),
    KeyboardButton("üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
)

# START
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üéì *”ò–î–Ü–°–¢–ï–ú–ï–õ–Ü–ö –ö”®–ú–ï–ö –ë–û–¢–´*
"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"
        "üîä –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ, “õ“±—Ä–º–µ—Ç—Ç—ñ “±—Å—Ç–∞–∑!

"
        "–ë“±–ª –±–æ—Ç –±–∞—Å—Ç–∞—É—ã—à —Å—ã–Ω—ã–ø –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ–Ω–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.
"
        "–ú“±–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç *–±–∞—Å—Ç–∞—É—ã—à –±—ñ–ª—ñ–º –±–µ—Ä—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã* –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ –¥–∞–π—ã–Ω–¥–∞–ª“ì–∞–Ω.

"
        "üìö *–°—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–∑:*
"
        "‚úÖ –°–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã (—Å–∞–±–∞“õ—Ç—ã“£ –∫–µ–∑–µ“£–¥–µ—Ä—ñ, –∞—Å–ø–µ–∫—Ç—ñ–ª–µ—Ä—ñ, “õ“±–Ω–¥—ã–ª—ã“õ—Ç–∞—Ä, –∫–µ“£–µ–π—Ç—ñ–ª–≥–µ–Ω –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã –µ–Ω–≥—ñ–∑—É)
"
        "‚úÖ –ë–∞“ì–∞–ª–∞—É –∂“Ø–π–µ—Å—ñ (“õ–∞–ª—ã–ø—Ç–∞—Å—Ç—ã—Ä—É—à—ã –±–∞“ì–∞–ª–∞—É, –±–∞“õ—ã–ª–∞—É, –±–∞“ì–∞–ª–∞—É —Ç“Ø—Ä–ª–µ—Ä—ñ)
"
        "‚úÖ –ü”ô–Ω–¥—ñ–∫ —Å“±—Ä–∞“õ—Ç–∞—Ä (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ, ”ô–¥–µ–±–∏–µ—Ç, –∂–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É, –¥“Ø–Ω–∏–µ—Ç–∞–Ω—É)
"
        "‚úÖ “ö“±–∂–∞—Ç—Ç–∞—Ä –º–µ–Ω –∞–Ω—ã“õ—Ç–∞–º–∞–ª–∞—Ä
"
        "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä
"
        "‚úÖ –°–µ–º–∏–Ω–∞—Ä–ª–∞—Ä –º–µ–Ω –∫—É—Ä—Å –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä
"
        "‚úÖ –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞ –±–æ–π—ã–Ω—à–∞ –∫–µ“£–µ—Å (“õ–∞–Ω–¥–∞–π –∏–¥–µ—è–ª–∞—Ä —Ç–∏—ñ–º–¥—ñ)
"
        "‚úÖ –ê—Ç—Ç–µ—Å—Ç–∞—Ç—Ç–∞—É –∂”ô–Ω–µ –∞–Ω—ã“õ—Ç–∞–º–∞ –∞–ª—É –∂–æ–ª–¥–∞—Ä—ã

"
        "üì≤ *“ö–∞–ª–∞–π –±–∞–π–ª–∞–Ω—ã—Å—É“ì–∞ –±–æ–ª–∞–¥—ã?*
"
        "–¢”©–º–µ–Ω–¥–µ–≥—ñ –º”ô–∑—ñ—Ä–¥–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –±”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ –æ“£ –∂–∞“õ—Ç–∞“ì—ã –º”ô–∑—ñ—Ä–¥—ñ –±–∞—Å—ã–ø, WhatsApp-“õ–∞ —à—ã“ì—ã“£—ã–∑.
"
        "–ñ–∞—É–∞–ø 24 —Å–∞“ì–∞—Ç—Ç—ã“£ —ñ—à—ñ–Ω–¥–µ –±–µ—Ä—ñ–ª–µ–¥—ñ.",
        parse_mode="Markdown",
        reply_markup=main_kb
    )

# FSM –¥–∏–∞–ª–æ–≥
@dp.message_handler(lambda msg: msg.text == "üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
async def start_request(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì≤ –ù”©–º—ñ—Ä—ñ–º–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True))
    kb.add(KeyboardButton("‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"))
    await message.answer("üìõ –ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:", reply_markup=kb)
    await RequestForm.waiting_for_name.set()

@dp.message_handler(state=RequestForm.waiting_for_name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì≤ –ù”©–º—ñ—Ä—ñ–º–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True))
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:", reply_markup=kb)
    await RequestForm.waiting_for_phone.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=RequestForm.waiting_for_phone)
async def get_phone_contact(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:")
    await RequestForm.waiting_for_question.set()

@dp.message_handler(state=RequestForm.waiting_for_phone)
async def get_phone_text(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:")
    await RequestForm.waiting_for_question.set()

@dp.message_handler(state=RequestForm.waiting_for_question)
async def get_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data['name']
    phone = user_data['phone']
    question = message.text

    text = (
        f"üì• *–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ–º!*

"
        f"üë§ –ê—Ç—ã: {name}
"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
"
        f"üìù –°“±—Ä–∞“õ: {question}
"
        f"üì≤ WhatsApp: https://wa.me/{''.join(filter(str.isdigit, phone))}"
    )

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="Markdown")
    await message.answer("‚úÖ –†–∞“õ–º–µ—Ç! –°“±—Ä–∞–Ω—ã—Å—ã“£—ã–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
    await state.finish()

# FAQ (–ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
@dp.message_handler(lambda msg: msg.text == "üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä")
async def show_faq_categories(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìö –ü”ô–Ω –±–æ–π—ã–Ω—à–∞", callback_data="faq_subjects"),
        InlineKeyboardButton("üìù –ë–∞“ì–∞–ª–∞—É / –°–∞–±–∞“õ", callback_data="faq_assessment"),
        InlineKeyboardButton("üìé –ë–∞—Å“õ–∞—Ä—É / –ú–∞“õ–∞–ª–∞", callback_data="faq_docs"),
        InlineKeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è / –ö—É—Ä—Å", callback_data="faq_psy"),
        InlineKeyboardButton("üßæ –ê–Ω—ã“õ—Ç–∞–º–∞ / –ê—à—ã“õ —Å–∞–±–∞“õ", callback_data="faq_cert"),
        InlineKeyboardButton("üéØ –°–∞–π—ã—Å / –ê–≤—Ç–æ—Ä–ª—ã“õ", callback_data="faq_other")
    )
    await message.answer("ü§î “ö–∞–π –±”©–ª—ñ–º –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“ì—ã“£—ã–∑ –±–∞—Ä?", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("faq_"))
async def show_faq_detail(callback_query: types.CallbackQuery):
    data = {
        "faq_subjects": "üìö *–ü”ô–Ω –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä:*
- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
- “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ
- –ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É
- –î“Ø–Ω–∏–µ—Ç–∞–Ω—É
- ”ò–ª—ñ–ø–ø–µ",
        "faq_assessment": "üìù *–ë–∞“ì–∞–ª–∞—É –º–µ–Ω —Å–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã:*
- –°–∞–±–∞“õ “õ“±—Ä—ã–ª—ã–º—ã
- –ë–∞“ì–∞–ª–∞—É —Ç“Ø—Ä–ª–µ—Ä—ñ
- –ö–µ“£–µ–π—Ç—ñ–ª–≥–µ–Ω –¥–∞“ì–¥—ã–ª–∞—Ä",
        "faq_docs": "üìé *“ö“±–∂–∞—Ç—Ç–∞—Ä / –ú–∞“õ–∞–ª–∞ / –ë–∞—Å“õ–∞—Ä—É:*
- –°—ã–Ω—ã–ø—Ç—ã –±–∞—Å“õ–∞—Ä—É
- “ö“±–∂–∞—Ç –∂“Ø—Ä–≥—ñ–∑—É
- –ú–∞“õ–∞–ª–∞ –∂–∞—Ä–∏—è–ª–∞—É",
        "faq_psy": "üí¨ *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä –º–µ–Ω –∫—É—Ä—Å:*
- –¢—Ä–µ–Ω–∏–Ω–≥ “Ø–ª–≥—ñ–ª–µ—Ä—ñ
- –ö—É—Ä—Å—Ç–∞—Ä–¥–∞–Ω –∞–ª“ì–∞–Ω ”ô–¥—ñ—Å—Ç–µ—Ä",
        "faq_cert": "üßæ *–ê–Ω—ã“õ—Ç–∞–º–∞ / –ê—à—ã“õ —Å–∞–±–∞“õ:*
- –ê—à—ã“õ —Å–∞–±–∞“õ “Ø–ª–≥—ñ–ª–µ—Ä—ñ
- –ê–Ω—ã“õ—Ç–∞–º–∞ —Ä”ô—Å—ñ–º–¥–µ—É –∂–æ–ª–¥–∞—Ä—ã",
        "faq_other": "üéØ *–°–∞–π—ã—Å / –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞:*
- –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –∏–¥–µ—è–ª–∞—Ä —Å–∞–π—ã—Å—ã
- –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞
- –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å“±—Ä–∞“õ—Ç–∞—Ä—ã"
    }
    text = data.get(callback_query.data, "“ö–∞—Ç–µ –∫–µ—Ç—Ç—ñ...")
    await callback_query.message.answer(text, parse_mode="Markdown")

# Anti-sleep web server
async def web_handler(request):
    return web.Response(text="Bot is running!")

async def web_server():
    app = web.Application()
    app.router.add_get('/', web_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.environ.get('PORT', 8080)))
    await site.start()

async def main():
    await asyncio.gather(
        web_server(),
        dp.start_polling()
    )

if __name__ == '__main__':
    asyncio.run(main())
