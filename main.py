import logging
import os
import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = 584791919

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class RequestForm(StatesGroup):
    name = State()
    phone = State()
    question = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä"),
    KeyboardButton("üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
)

# === FAQ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –º–µ–Ω—é === #
faq_main_kb = InlineKeyboardMarkup(row_width=1)
faq_main_kb.add(
    InlineKeyboardButton("üìö –ü”ô–Ω –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä", callback_data="cat_1"),
    InlineKeyboardButton("üìù –ë–∞“ì–∞–ª–∞—É / –°–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã", callback_data="cat_2"),
    InlineKeyboardButton("üìé –ë–∞—Å“õ–∞—Ä—É / –ú–∞“õ–∞–ª–∞ / –ê–ö–¢", callback_data="cat_3"),
    InlineKeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è / –ö—É—Ä—Å / –°–µ–º–∏–Ω–∞—Ä", callback_data="cat_4"),
    InlineKeyboardButton("üßæ –ê–Ω—ã“õ—Ç–∞–º–∞ / “ö–æ–ª–¥–∞—É / –ê—à—ã“õ —Å–∞–±–∞“õ", callback_data="cat_5"),
    InlineKeyboardButton("üéØ –°–∞–π—ã—Å / –ê–≤—Ç–æ—Ä–ª—ã“õ / –ë–∞—Å“õ–∞", callback_data="cat_6")
)

faq_submenus = {
    "cat_1": (
        "üìö *–ü”ô–Ω –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä:*\n\n"
        "üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: \"–ï—Å–µ–ø —à—ã“ì–∞—Ä—É“ì–∞ –º–∏ “õ–∞–π–Ω–∞–π –º–∞? –ö”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–∑!\"\n"
        "üìñ “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ: \"–¢–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã –±–µ–∑–≥–µ–∫–ø–µ–Ω –µ–º–µ—Å, –∂“Ø–π–µ–º–µ–Ω –∂–∞—Å–∞“£—ã–∑.\"\n"
        "üåç –ñ–∞—Ä–∞—Ç—ã–ª—ã—Å—Ç–∞–Ω—É: \"–°–∞–±–∞“õ—Ç–∞—Ä —Ç–∞–±–∏“ì–∞—Ç—Ç–∞–π —Ç—ñ—Ä—ñ –±–æ–ª—Å—ã–Ω!\"\n"
        "üåê –î“Ø–Ω–∏–µ—Ç–∞–Ω—É: \"”ò–ª–µ–º–¥—ñ —Ç–∞–Ω—ã—Ç–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä –æ—Å—ã–Ω–¥–∞.\"\n"
        "üî§ ”ò–ª—ñ–ø–ø–µ: \"”ò—Ä—ñ–ø—Ç–µ—Ä ”ô–ª–µ–º—ñ–Ω–µ —Å–∞—è—Ö–∞—Ç.\""
    ),
    "cat_2": (
        "üìù *–ë–∞“ì–∞–ª–∞—É –∂”ô–Ω–µ —Å–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã:*\n\n"
        "üìã –°–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã: \"–ñ–æ—Å–ø–∞—Ä ‚Äì –º“±“ì–∞–ª—ñ–º–Ω—ñ“£ GPS-—ñ.\"\n"
        "üìä –ë–∞“ì–∞–ª–∞—É: \"”ò—Ä –±–∞–ª–∞ ‚Äì –∂–µ–∫–µ ”ô–ª–µ–º, –±–∞“ì–∞–ª–∞—É –¥–∞ ”ô–¥—ñ–ª–µ—Ç—Ç—ñ –±–æ–ª—Å—ã–Ω!\""
    ),
    "cat_3": (
        "üìé *–°—ã–Ω—ã–ø –±–∞—Å“õ–∞—Ä—É, –º–∞“õ–∞–ª–∞, –ê–ö–¢:*\n\n"
        "üßë‚Äçüè´ –ë–∞—Å“õ–∞—Ä—É: \"–°—ã–Ω—ã–ø—Ç–∞ —Ç”ô—Ä—Ç—ñ–ø ‚Äì —Ç–∞–±—ã—Å—Ç—ã“£ –∂–∞—Ä—Ç—ã—Å—ã.\"\n"
        "üì∞ –ú–∞“õ–∞–ª–∞: \"–û–π—ã“£ –±–∞—Ä –º–∞? –ñ–∞—Ä–∏—è–ª–∞–ø –∂—ñ–±–µ—Ä!\"\n"
        "üíª –ê–ö–¢: \"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è ‚Äì —Å—ñ–∑–¥—ñ“£ –∫”©–º–µ–∫—à—ñ“£—ñ–∑.\""
    ),
    "cat_4": (
        "üí¨ *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫—É—Ä—Å, —Å–µ–º–∏–Ω–∞—Ä:*\n\n"
        "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä: \"–ñ–∞–Ω“ì–∞ –¥–µ–º, —Å–∞–±–∞“õ“õ–∞ —Å–µ—Ä–ø—ñ–Ω.\"\n"
        "üìö –ö—É—Ä—Å: \"–ë—ñ–ª—ñ–º–¥—ñ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É –µ—à“õ–∞—à–∞–Ω –∫–µ—à –µ–º–µ—Å.\"\n"
        "üéì –°–µ–º–∏–Ω–∞—Ä–ª–∞—Ä: \"–ë–∞—Å“õ–∞–ª–∞—Ä–º–µ–Ω –±”©–ª—ñ—Å—É ‚Äì “Ø–π—Ä–µ–Ω—É–¥—ñ“£ –∂–∞—Ä—Ç—ã—Å—ã.\""
    ),
    "cat_5": (
        "üßæ *–ê–Ω—ã“õ—Ç–∞–º–∞, “õ–æ–ª–¥–∞—É, –∞—à—ã“õ —Å–∞–±–∞“õ:*\n\n"
        "üìë –ê–Ω—ã“õ—Ç–∞–º–∞: \"“ö“±–∂–∞—Ç–ø–µ–Ω –º”ô—Å–µ–ª–µ —Ç—É—ã–Ω–¥–∞—Å–∞ ‚Äì –±—ñ–∑–≥–µ –∂–∞–∑—ã“£—ã–∑.\"\n"
        "üôå “ö–æ–ª–¥–∞—É: \"–ö—É—Ä—Å –±—ñ—Ç–∫–µ–Ω —Å–æ“£ –¥–∞ –±—ñ—Ä–≥–µ –±–æ–ª–∞–º—ã–∑.\"\n"
        "üßë‚Äçüè´ –ê—à—ã“õ —Å–∞–±–∞“õ: \"–ö”©—Ä—Å–µ—Ç–µ—Ç—ñ–Ω —Å–∞–±–∞“õ ‚Äì –∫”©—Ä—Å–µ—Ç–∫—ñ—à—ñ“£.\""
    ),
    "cat_6": (
        "üéØ *–°–∞–π—ã—Å—Ç–∞—Ä –∂”ô–Ω–µ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä:*\n\n"
        "üèÜ –ü–µ–¥. –∏–¥–µ—è–ª–∞—Ä —Å–∞–π—ã—Å—ã: \"–®–∞–±—ã—Ç—Ç—ã –º“±“ì–∞–ª—ñ–º ‚Äì “Ø–∑–¥—ñ–∫ –º“±“ì–∞–ª—ñ–º.\"\n"
        "üìò –ê–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞: \"–°—ñ–∑–¥—ñ“£ —Ç”ô–∂—ñ—Ä–∏–±–µ“£—ñ–∑ ‚Äì “Ø–ª–≥—ñ–≥–µ –ª–∞–π—ã“õ.\"\n"
        "‚ùì –ë–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä: \"–ë”ô—Ä—ñ–Ω —Å“±—Ä–∞“£—ã–∑ ‚Äì –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–∑!\""
    ),
}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "üéì *”ò–î–Ü–°–¢–ï–ú–ï–õ–Ü–ö –ö”®–ú–ï–ö –ë–û–¢–´*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üîä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ, “õ“±—Ä–º–µ—Ç—Ç—ñ “±—Å—Ç–∞–∑!*\n\n"
        "–ë“±–ª –±–æ—Ç –±–∞—Å—Ç–∞—É—ã—à —Å—ã–Ω—ã–ø –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ–Ω–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.\n"
        "–ú“±–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç *–∞–≤—Ç–æ—Ä–ª—ã“õ –±–∞“ì–¥–∞—Ä–ª–∞–º–∞ –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ* –¥–∞–π—ã–Ω–¥–∞–ª“ì–∞–Ω.\n\n"
        "üìö –°—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–∑:\n"
        "‚úÖ –°–∞–±–∞“õ –∂–æ—Å–ø–∞—Ä—ã\n"
        "‚úÖ –ë–∞“ì–∞–ª–∞—É –∂“Ø–π–µ—Å—ñ\n"
        "‚úÖ –ü”ô–Ω–¥—ñ–∫ —Å“±—Ä–∞“õ—Ç–∞—Ä\n"
        "‚úÖ “ö“±–∂–∞—Ç—Ç–∞—Ä –º–µ–Ω –∞–Ω—ã“õ—Ç–∞–º–∞–ª–∞—Ä\n"
        "‚úÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ —Ç—Ä–µ–Ω–∏–Ω–≥—Ç–µ—Ä\n"
        "‚úÖ –°–µ–º–∏–Ω–∞—Ä–ª–∞—Ä –º–µ–Ω –∫—É—Ä—Å –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä\n\n"
        "üëá –¢”©–º–µ–Ω–¥–µ–≥—ñ –º”ô–∑—ñ—Ä–¥–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –±”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑.",
        parse_mode="Markdown",
        reply_markup=main_kb
    )

@dp.message_handler(lambda message: message.text == "üìÑ –ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä")
async def faq_handler(message: types.Message):
    await message.answer("ü§î “ö–∞–π –±”©–ª—ñ–º –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“ì—ã“£—ã–∑ –±–∞—Ä?", reply_markup=faq_main_kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("cat_"))
async def process_faq_category(callback_query: types.CallbackQuery):
    data = faq_submenus.get(callback_query.data)
    if data:
        await bot.send_message(callback_query.from_user.id, data[0], parse_mode="Markdown")
    await callback_query.answer()

# ====== FSM-–∑–∞—è–≤–∫–∞ ====== #
@dp.message_handler(lambda message: message.text == "üìù ”®—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É")
async def start_request(message: types.Message):
    await message.answer("üë§ –ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.name.set()

@dp.message_handler(state=RequestForm.name)
async def request_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    contact_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_kb.add(KeyboardButton("üì≤ –ù”©–º—ñ—Ä—ñ–º–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True))
    contact_kb.add(KeyboardButton("‚úçÔ∏è ”®–∑—ñ–º –∂–∞–∑–∞–º—ã–Ω"))
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∂–∞–∑—ã“£—ã–∑:", reply_markup=contact_kb)
    await RequestForm.phone.set()

@dp.message_handler(content_types=types.ContentType.CONTACT, state=RequestForm.phone)
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.question.set()

@dp.message_handler(lambda message: message.text.startswith("‚úçÔ∏è"), state=RequestForm.phone)
async def ask_manual_phone(message: types.Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:")

@dp.message_handler(state=RequestForm.phone)
async def get_manual_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üìù –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã —Å–∏–ø–∞—Ç—Ç–∞–ø –∂–∞–∑—ã“£—ã–∑:")
    await RequestForm.question.set()

@dp.message_handler(state=RequestForm.question)
async def get_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = data['phone']
    question = message.text

    text = (
        f"üìÖ *–ñ–∞“£–∞ ”©—Ç—ñ–Ω—ñ–º!*\n"
        f"\nüë§ –ê—Ç—ã: {name}"
        f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        f"\nüí¨ –°“±—Ä–∞“õ: {question}"
        f"\n\nüì≤ WhatsApp: https://wa.me/{''.join(filter(str.isdigit, phone))}"
    )
    await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")
    await message.answer("–†–∞“õ–º–µ—Ç! ”®—Ç—ñ–Ω—ñ–º—ñ“£—ñ–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.", reply_markup=main_kb)
    await state.finish()

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä anti-sleep
async def web_handler(request):
    return web.Response(text="Bot is running!")

async def web_server():
    app = web.Application()
    app.router.add_get('/', web_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.environ.get('PORT', 8080)))
    await site.start()

async def main():
    await asyncio.gather(
        web_server(),
        dp.start_polling()
    )

if __name__ == '__main__':
    asyncio.run(main())
